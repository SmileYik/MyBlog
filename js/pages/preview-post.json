[{"markdown":"给你一个二叉树, 按照 **层序遍历** 返回节点值.\n\n## 层序遍历\n\n从根节点到树枝, 从左至右, 即一层一层从左至右遍历二叉树.\n\n### 题解1\n\n很容易想到广度优先搜索.\n\n","time":"2021-04-05 20:51:46","title":"二叉树的层序遍历","url":"./post.html?BinaryTree=awearr"},{"markdown":"给你二叉树的根节点 `root` ，返回它节点值的 **后序** 遍历。\n\n## 关于二叉树的后序遍历\n\n后序遍历是先记录左子树, 再记录右子树, 最后记录根节点, 对于子树也执行相应操作.\n\n### 题解1\n  \n隐式使用栈来遍历, 也就是递归.\n\n","time":"2021-04-05 20:39:07","title":"二叉树的后序遍历","url":"./post.html?BinaryTree=nascrr"},{"markdown":"给你二叉树的根节点 `root` ，返回它节点值的 **中序** 遍历。\n\n## 关于二叉树的中序遍历\n\n前序遍历是先记录左子树, 再记录根节点, 最后记录右子树, 对于子树也执行相应操作.\n\n### 题解1\n  \n隐式使用栈来遍历, 也就是递归.\n\n","time":"2021-04-05 20:14:10","title":"二叉树的中序遍历","url":"./post.html?BinaryTree=lsasls"},{"markdown":"给你二叉树的根节点 `root` ，返回它节点值的 **前序** 遍历。\n\n## 关于二叉树的前序遍历\n\n前序遍历是先遍历根节点, 再记录左子树, 最后记录后子树. 对于子树也是进行相同操作.\n\n### 题解1\n  \n隐式使用栈来遍历, 也就是递归.\n\n","time":"2021-04-05 19:27:39","title":"二叉树的前序遍历","url":"./post.html?BinaryTree=lyjdvy"},{"markdown":"[原贴](https://leetcode-cn.com/leetbook/read/queue-stack/gle1r/)\n\n有 `N` 个房间，开始时你位于 `0` 号房间。每个房间有不同的号码：`0，1，2，...，N-1`，并且房间里可能有一些钥匙能使你进入下一个房间。\n\n在形式上，对于每个房间 `i` 都有一个钥匙列表 `rooms[i]`，每个钥匙 `rooms[i][j]` 由 `[0,1，...，N-1]` 中的一个整数表示，其中 `N = rooms.length`。 钥匙 `rooms[i][j] = v` 可以打开编号为 `v` 的房间。\n\n最初，除 `0` 号房间外的其余所有房间都被锁住。\n\n你可以自由地在房间之间来回走动。\n\n","time":"2021-04-04 19:03:21","title":"钥匙和房间","url":"./post.html?QueueAndStack=sdkzxe"}]